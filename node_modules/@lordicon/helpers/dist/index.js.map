{"version":3,"file":"index.js","sources":["../src/core.ts","../src/global.ts","../src/parsers.ts","../src/lottie.ts"],"sourcesContent":["/**\n * Deep clone of value.\n * @param value\n */\nexport function deepClone(value: any) {\n    return JSON.parse(JSON.stringify(value));\n}\n\n/**\n * Check value is null or undefined.\n * @param value \n * @returns\n */\nexport function isNil(value: any) {\n    return value === null || value === undefined;\n}\n\n/**\n * Checks if value is object-like. A value is object-like if it\"s not null and has a typeof result of \"object\".\n * @param value\n */\nexport function isObjectLike(value: any): value is object {\n    return value !== null && typeof value === \"object\";\n}\n\n/**\n * Checks if path is a direct property of object.\n * @param object\n * @param path\n */\nexport function has<T>(object: T, path: string | string[]): boolean {\n    const newPath = Array.isArray(path) ? path : path.split(\".\");\n    let current: any = object;\n\n    for (const key of newPath) {\n        if (!isObjectLike(current)) {\n            return false;\n        }\n\n        if (!(key in current)) {\n            return false;\n        }\n\n        current = (current as any)[key];\n    }\n\n    return true;\n}\n\n/**\n * Get object value from path. Otherwise return defaultValue.\n * @param object\n * @param path\n * @param defaultValue\n */\nexport function get<T>(object: T, path: string | string[], defaultValue?: any): any {\n    const newPath = Array.isArray(path) ? path : path.split(\".\");\n    let current: any = object;\n\n    for (const key of newPath) {\n        if (!isObjectLike(current)) {\n            return defaultValue;\n        }\n\n        if (!(key in current)) {\n            return defaultValue;\n        }\n\n        current = (current as any)[key];\n    }\n\n    return current === undefined ? defaultValue : current;\n}\n\n/**\n * Update object value on path.\n * @param object\n * @param path\n * @param value\n */\nexport function set(object: any, path: string | string[], value: any) {\n    let current = object;\n\n    const newPath = Array.isArray(path) ? path : path.split(\".\");\n\n    for (let i = 0; i < newPath.length; ++i) {\n        if (i === newPath.length - 1) {\n            current[newPath[i]] = value;\n        } else {\n            current = current[newPath[i]];\n        }\n    }\n}\n","/**\n * List of supported colors.\n */\nexport const COLORS: any = {\n    'aliceblue': '#f0f8ff',\n    'antiquewhite': '#faebd7',\n    'aqua': '#00ffff',\n    'aquamarine': '#7fffd4',\n    'azure': '#f0ffff',\n    'beige': '#f5f5dc',\n    'bisque': '#ffe4c4',\n    'black': '#000000',\n    'blanchedalmond': '#ffebcd',\n    'blue': '#0000ff',\n    'blueviolet': '#8a2be2',\n    'brown': '#a52a2a',\n    'burlywood': '#deb887',\n    'cadetblue': '#5f9ea0',\n    'chartreuse': '#7fff00',\n    'chocolate': '#d2691e',\n    'coral': '#ff7f50',\n    'cornflowerblue': '#6495ed',\n    'cornsilk': '#fff8dc',\n    'crimson': '#dc143c',\n    'cyan': '#00ffff',\n    'darkblue': '#00008b',\n    'darkcyan': '#008b8b',\n    'darkgoldenrod': '#b8860b',\n    'darkgray': '#a9a9a9',\n    'darkgreen': '#006400',\n    'darkkhaki': '#bdb76b',\n    'darkmagenta': '#8b008b',\n    'darkolivegreen': '#556b2f',\n    'darkorange': '#ff8c00',\n    'darkorchid': '#9932cc',\n    'darkred': '#8b0000',\n    'darksalmon': '#e9967a',\n    'darkseagreen': '#8fbc8f',\n    'darkslateblue': '#483d8b',\n    'darkslategray': '#2f4f4f',\n    'darkturquoise': '#00ced1',\n    'darkviolet': '#9400d3',\n    'deeppink': '#ff1493',\n    'deepskyblue': '#00bfff',\n    'dimgray': '#696969',\n    'dodgerblue': '#1e90ff',\n    'firebrick': '#b22222',\n    'floralwhite': '#fffaf0',\n    'forestgreen': '#228b22',\n    'fuchsia': '#ff00ff',\n    'gainsboro': '#dcdcdc',\n    'ghostwhite': '#f8f8ff',\n    'gold': '#ffd700',\n    'goldenrod': '#daa520',\n    'gray': '#808080',\n    'green': '#008000',\n    'greenyellow': '#adff2f',\n    'honeydew': '#f0fff0',\n    'hotpink': '#ff69b4',\n    'indianred ': '#cd5c5c',\n    'indigo': '#4b0082',\n    'ivory': '#fffff0',\n    'khaki': '#f0e68c',\n    'lavender': '#e6e6fa',\n    'lavenderblush': '#fff0f5',\n    'lawngreen': '#7cfc00',\n    'lemonchiffon': '#fffacd',\n    'lightblue': '#add8e6',\n    'lightcoral': '#f08080',\n    'lightcyan': '#e0ffff',\n    'lightgoldenrodyellow': '#fafad2',\n    'lightgrey': '#d3d3d3',\n    'lightgreen': '#90ee90',\n    'lightpink': '#ffb6c1',\n    'lightsalmon': '#ffa07a',\n    'lightseagreen': '#20b2aa',\n    'lightskyblue': '#87cefa',\n    'lightslategray': '#778899',\n    'lightsteelblue': '#b0c4de',\n    'lightyellow': '#ffffe0',\n    'lime': '#00ff00',\n    'limegreen': '#32cd32',\n    'linen': '#faf0e6',\n    'magenta': '#ff00ff',\n    'maroon': '#800000',\n    'mediumaquamarine': '#66cdaa',\n    'mediumblue': '#0000cd',\n    'mediumorchid': '#ba55d3',\n    'mediumpurple': '#9370d8',\n    'mediumseagreen': '#3cb371',\n    'mediumslateblue': '#7b68ee',\n    'mediumspringgreen': '#00fa9a',\n    'mediumturquoise': '#48d1cc',\n    'mediumvioletred': '#c71585',\n    'midnightblue': '#191970',\n    'mintcream': '#f5fffa',\n    'mistyrose': '#ffe4e1',\n    'moccasin': '#ffe4b5',\n    'navajowhite': '#ffdead',\n    'navy': '#000080',\n    'oldlace': '#fdf5e6',\n    'olive': '#808000',\n    'olivedrab': '#6b8e23',\n    'orange': '#ffa500',\n    'orangered': '#ff4500',\n    'orchid': '#da70d6',\n    'palegoldenrod': '#eee8aa',\n    'palegreen': '#98fb98',\n    'paleturquoise': '#afeeee',\n    'palevioletred': '#d87093',\n    'papayawhip': '#ffefd5',\n    'peachpuff': '#ffdab9',\n    'peru': '#cd853f',\n    'pink': '#ffc0cb',\n    'plum': '#dda0dd',\n    'powderblue': '#b0e0e6',\n    'purple': '#800080',\n    'rebeccapurple': '#663399',\n    'red': '#ff0000',\n    'rosybrown': '#bc8f8f',\n    'royalblue': '#4169e1',\n    'saddlebrown': '#8b4513',\n    'salmon': '#fa8072',\n    'sandybrown': '#f4a460',\n    'seagreen': '#2e8b57',\n    'seashell': '#fff5ee',\n    'sienna': '#a0522d',\n    'silver': '#c0c0c0',\n    'skyblue': '#87ceeb',\n    'slateblue': '#6a5acd',\n    'slategray': '#708090',\n    'snow': '#fffafa',\n    'springgreen': '#00ff7f',\n    'steelblue': '#4682b4',\n    'tan': '#d2b48c',\n    'teal': '#008080',\n    'thistle': '#d8bfd8',\n    'tomato': '#ff6347',\n    'turquoise': '#40e0d0',\n    'violet': '#ee82ee',\n    'wheat': '#f5deb3',\n    'white': '#ffffff',\n    'whitesmoke': '#f5f5f5',\n    'yellow': '#ffff00',\n    'yellowgreen': '#9acd32'\n};","import { COLORS } from './global';\nimport { IColors } from './interfaces';\n\n/**\n * Return hex color from name.\n * \n * Example:\n * ```js\n * parseColor('blue'); // #0000ff\n * ```\n * \n * @param colorName Color name.\n * @returns \n */\nexport function parseColor(colorName: string): string {\n    if (colorName.startsWith('#')) {\n        if (colorName.length === 4) {\n            // support shorthand\n            return `#${colorName[1]}${colorName[1]}${colorName[2]}${colorName[2]}${colorName[3]}${colorName[3]}`;\n        } else {\n            return colorName;\n        }\n    } else {\n        return COLORS[colorName.toLowerCase()] || '#000000';\n    }\n}\n\n/**\n * Parse colors attribute.\n * \n * Example:\n * ```js\n * parseColors('primary:red,secondary:#00ff00'); // { primary: '#ff0000', secondary: '#00ff00' }\n * ```\n * \n * @param colors Colors definied in string.\n * @returns Object with colors.\n */\nexport function parseColors(colors: any): IColors | undefined {\n    if (!colors || typeof colors !== 'string') {\n        return undefined;\n    }\n\n    const list = colors.split(',').filter(c => c).map(c => c.split(':')).filter(c => c.length == 2);\n\n    return list.reduce<IColors>((p, c) => {\n        const a = c[0];\n        p[a.toLowerCase()] = parseColor(c[1]);\n        return p;\n    }, {});\n}\n\n/**\n * Parse stroke attribute to supported range.\n * @param value\n * @returns \n */\nexport function parseStroke(value: any): (1 | 2 | 3 | undefined) {\n    if (value === 'light' || value === 1 || value === '1') {\n        return 1;\n    } else if (value === 'regular' || value === 2 || value === '2') {\n        return 2;\n    } else if (value === 'bold' || value === 3 || value === '3') {\n        return 3;\n    }\n\n    // legacy icon file support (without markers)\n    if (typeof value === 'number' || typeof value === 'string') {\n        return +(value) as any;\n    }\n\n    return undefined;\n}\n\n/**\n * Parse state attribute.\n * @param value\n * @returns\n */\nexport function parseState(value: any): (string | undefined) {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    return undefined;\n}\n","import { set } from './core';\nimport { IconData } from './interfaces';\nimport { parseColor } from './parsers';\n\n/**\n * Lottie color type.\n */\nexport type LottieColor = [number, number, number];\n\n/**\n * Supported field types.\n */\nexport type LottieFieldType = 'color' | 'slider' | 'point' | 'checkbox' | 'feature';\n\n/**\n * Interface for colors parameters.\n */\nexport interface IRGBColor {\n    r: number;\n    g: number;\n    b: number;\n}\n\n/**\n * Interface for found property.\n */\nexport interface ILottieProperty {\n    name: string;\n    path: string;\n    value: any;\n    type: LottieFieldType;\n}\n\n/**\n * Convert to hexadecimal value.\n * @param c \n * @returns \n */\nfunction componentToHex(c: number) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\n\n/**\n * Convert from color object to hex value.\n * @param value \n * @returns \n */\nfunction rgbToHex(value: IRGBColor): string {\n    return (\n        '#' +\n        componentToHex(value.r) +\n        componentToHex(value.g) +\n        componentToHex(value.b)\n    );\n}\n\n/**\n * Conver from hex to color object.\n * @param hex \n * @returns \n */\nfunction hexToRgb(hex: string): IRGBColor {\n    let data = parseInt(hex[0] != '#' ? hex : hex.substring(1), 16);\n    return {\n        r: (data >> 16) & 255,\n        g: (data >> 8) & 255,\n        b: data & 255,\n    };\n}\n\n/**\n * Helper method for scale value.\n * @param n\n * @returns \n */\nfunction toUnitVector(n: number) {\n    return Math.round((n / 255) * 1000) / 1000;\n}\n\n/**\n * Helper method for scale value.\n * @param n\n * @returns \n */\nfunction fromUnitVector(n: number) {\n    return Math.round(n * 255);\n}\n\n/**\n * Convert hex color to lottie representation.\n * @param hex\n * @returns \n */\nexport function hexToLottieColor(hex: string): LottieColor {\n    const {\n        r,\n        g,\n        b\n    } = hexToRgb(hex);\n    return [toUnitVector(r), toUnitVector(g), toUnitVector(b)];\n}\n\n/**\n * Conver lottie color representation to hex.\n * @param value \n * @returns \n */\nexport function lottieColorToHex(value: LottieColor): string {\n    const color: IRGBColor = {\n        r: fromUnitVector(value[0]),\n        g: fromUnitVector(value[1]),\n        b: fromUnitVector(value[2]),\n    };\n    return rgbToHex(color);\n}\n\n/**\n * Return all supported customizable properties.\n * @param data Icon data.\n * @param options Options.\n * @returns \n */\nexport function readProperties(\n    data: IconData,\n    { lottieInstance }: { lottieInstance?: boolean } = {},\n): ILottieProperty[] {\n    const result: any[] = [];\n\n    if (!data || !data.layers) {\n        return result;\n    }\n\n    data.layers.forEach((layer: any, layerIndex: number) => {\n        if (!layer.nm || !layer.ef) {\n            return;\n        }\n\n        layer.ef.forEach((field: any, fieldIndex: number) => {\n            const value = field?.ef?.[0]?.v?.k;\n            if (value === undefined) {\n                return;\n            }\n\n            let path: string | undefined;\n\n            if (lottieInstance) {\n                path = `renderer.elements.${layerIndex}.effectsManager.effectElements.${fieldIndex}.effectElements.0.p.v`;\n            } else {\n                path = `layers.${layerIndex}.ef.${fieldIndex}.ef.0.v.k`;\n            }\n\n            let type: LottieFieldType | undefined;\n\n            if (field.mn === 'ADBE Color Control') {\n                type = 'color';\n            } else if (field.mn === 'ADBE Slider Control') {\n                type = 'slider';\n            } else if (field.mn === 'ADBE Point Control') {\n                type = 'point';\n            } else if (field.mn === 'ADBE Checkbox Control') {\n                type = 'checkbox';\n            } else if (field.mn.startsWith('Pseudo/')) {\n                type = 'feature';\n            }\n\n            if (!type) {\n                return;\n            }\n\n            const name = field.nm.toLowerCase();\n\n            result.push({\n                name,\n                path,\n                value,\n                type,\n            });\n        });\n    });\n\n    return result;\n}\n\n/**\n * Reset data by indicated properties.\n * @param data \n * @param properties \n */\nexport function resetProperties(data: IconData, properties: ILottieProperty[]): any {\n    for (const property of properties) {\n        set(data, property.path, property.value);\n    }\n}\n\n/**\n * Update data to value by indicated properties.\n * @param data \n * @param properties \n * @param value \n */\nexport function updateProperties(data: IconData, properties: ILottieProperty[], value: any): any {\n    for (const property of properties) {\n        if (property.type === 'color') {\n            if (typeof value === 'object' && 'r' in value && 'g' in value && 'b' in value) {\n                set(data, property.path, [toUnitVector(value.r), toUnitVector(value.g), toUnitVector(value.b)]);\n            } else if (Array.isArray(value)) {\n                set(data, property.path, value);\n            } else if (typeof value === 'string') {\n                set(data, property.path, hexToLottieColor(parseColor(value)));\n            }\n        } else if (property.type === 'point') {\n            if (typeof value === 'object' && 'x' in value && 'y' in value) {\n                set(data, property.path + '.0', value.x);\n                set(data, property.path + '.1', value.y);\n            } else if (Array.isArray(value)) {\n                set(data, property.path + '.0', value[0]);\n                set(data, property.path + '.1', value[1]);\n            }\n        } else {\n            set(data, property.path, value);\n        }\n    }\n}\n"],"names":["deepClone","value","JSON","parse","stringify","isNil","isObjectLike","has","object","path","newPath","Array","isArray","split","current","key","get","defaultValue","undefined","set","i","length","COLORS","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","parseColor","colorName","startsWith","toLowerCase","parseColors","colors","filter","c","map","reduce","p","parseStroke","parseState","componentToHex","hex","toString","toUnitVector","n","Math","round","fromUnitVector","hexToLottieColor","r","g","b","data","parseInt","substring","hexToRgb","lottieColorToHex","rgbToHex","readProperties","lottieInstance","result","layers","forEach","layer","layerIndex","nm","ef","field","fieldIndex","v","k","type","mn","name","push","resetProperties","properties","property","updateProperties","x","y"],"mappings":"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"}